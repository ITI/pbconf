// Code generated by protoc-gen-go.
// source: driver.proto
// DO NOT EDIT!

/*
Package driver is a generated protocol buffer package.

It is generated from these files:
	driver.proto

It has these top-level messages:
	BoolReply
	KVPair
	KVRequest
	RegRequest
	DeviceID
	ServiceConfig
	UserPass
	Service
	Var
	Command
	CommandSeq
	ConfigFile
	ConfigFiles
*/
package driver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type BoolReply struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *BoolReply) Reset()                    { *m = BoolReply{} }
func (m *BoolReply) String() string            { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()               {}
func (*BoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type KVPair struct {
	Devid *DeviceID `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Key   string    `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value string    `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *KVPair) Reset()                    { *m = KVPair{} }
func (m *KVPair) String() string            { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()               {}
func (*KVPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KVPair) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

type KVRequest struct {
	Devid *DeviceID `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Key   string    `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *KVRequest) Reset()                    { *m = KVRequest{} }
func (m *KVRequest) String() string            { return proto.CompactTextString(m) }
func (*KVRequest) ProtoMessage()               {}
func (*KVRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KVRequest) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

type RegRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Socket string `protobuf:"bytes,2,opt,name=socket" json:"socket,omitempty"`
}

func (m *RegRequest) Reset()                    { *m = RegRequest{} }
func (m *RegRequest) String() string            { return proto.CompactTextString(m) }
func (*RegRequest) ProtoMessage()               {}
func (*RegRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DeviceID struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeviceID) Reset()                    { *m = DeviceID{} }
func (m *DeviceID) String() string            { return proto.CompactTextString(m) }
func (*DeviceID) ProtoMessage()               {}
func (*DeviceID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ServiceConfig struct {
	Devid *DeviceID `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Name  string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key   string    `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value string    `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *ServiceConfig) Reset()                    { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string            { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()               {}
func (*ServiceConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceConfig) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

type UserPass struct {
	Devid    *DeviceID `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Username string    `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string    `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *UserPass) Reset()                    { *m = UserPass{} }
func (m *UserPass) String() string            { return proto.CompactTextString(m) }
func (*UserPass) ProtoMessage()               {}
func (*UserPass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UserPass) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

type Service struct {
	Devid *DeviceID `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Name  string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	State bool      `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Service) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

type Var struct {
	Devid *DeviceID `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Key   string    `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value string    `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Var) Reset()                    { *m = Var{} }
func (m *Var) String() string            { return proto.CompactTextString(m) }
func (*Var) ProtoMessage()               {}
func (*Var) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Var) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

type Command struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CommandSeq struct {
	Devid    *DeviceID  `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Commands []*Command `protobuf:"bytes,2,rep,name=commands" json:"commands,omitempty"`
}

func (m *CommandSeq) Reset()                    { *m = CommandSeq{} }
func (m *CommandSeq) String() string            { return proto.CompactTextString(m) }
func (*CommandSeq) ProtoMessage()               {}
func (*CommandSeq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommandSeq) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

func (m *CommandSeq) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type ConfigFile struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ConfigFile) Reset()                    { *m = ConfigFile{} }
func (m *ConfigFile) String() string            { return proto.CompactTextString(m) }
func (*ConfigFile) ProtoMessage()               {}
func (*ConfigFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type ConfigFiles struct {
	Devid *DeviceID     `protobuf:"bytes,1,opt,name=devid" json:"devid,omitempty"`
	Files []*ConfigFile `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (m *ConfigFiles) Reset()                    { *m = ConfigFiles{} }
func (m *ConfigFiles) String() string            { return proto.CompactTextString(m) }
func (*ConfigFiles) ProtoMessage()               {}
func (*ConfigFiles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ConfigFiles) GetDevid() *DeviceID {
	if m != nil {
		return m.Devid
	}
	return nil
}

func (m *ConfigFiles) GetFiles() []*ConfigFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*BoolReply)(nil), "Driver.BoolReply")
	proto.RegisterType((*KVPair)(nil), "Driver.KVPair")
	proto.RegisterType((*KVRequest)(nil), "Driver.KVRequest")
	proto.RegisterType((*RegRequest)(nil), "Driver.RegRequest")
	proto.RegisterType((*DeviceID)(nil), "Driver.DeviceID")
	proto.RegisterType((*ServiceConfig)(nil), "Driver.ServiceConfig")
	proto.RegisterType((*UserPass)(nil), "Driver.UserPass")
	proto.RegisterType((*Service)(nil), "Driver.Service")
	proto.RegisterType((*Var)(nil), "Driver.Var")
	proto.RegisterType((*Command)(nil), "Driver.Command")
	proto.RegisterType((*CommandSeq)(nil), "Driver.CommandSeq")
	proto.RegisterType((*ConfigFile)(nil), "Driver.ConfigFile")
	proto.RegisterType((*ConfigFiles)(nil), "Driver.ConfigFiles")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Engine service

type EngineClient interface {
	Register(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetMeta(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVPair, error)
	SaveMeta(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*BoolReply, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Register(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/Driver.Engine/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetMeta(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVPair, error) {
	out := new(KVPair)
	err := grpc.Invoke(ctx, "/Driver.Engine/GetMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) SaveMeta(ctx context.Context, in *KVPair, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/Driver.Engine/SaveMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Engine service

type EngineServer interface {
	Register(context.Context, *RegRequest) (*BoolReply, error)
	GetMeta(context.Context, *KVRequest) (*KVPair, error)
	SaveMeta(context.Context, *KVPair) (*BoolReply, error)
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EngineServer).Register(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Engine_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EngineServer).GetMeta(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Engine_SaveMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(KVPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(EngineServer).SaveMeta(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Driver.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Engine_Register_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _Engine_GetMeta_Handler,
		},
		{
			MethodName: "SaveMeta",
			Handler:    _Engine_SaveMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Driver service

type DriverClient interface {
	GetConfig(ctx context.Context, in *DeviceID, opts ...grpc.CallOption) (*ConfigFiles, error)
	TranslatePass(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*CommandSeq, error)
	TranslateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*CommandSeq, error)
	TranslateVar(ctx context.Context, in *Var, opts ...grpc.CallOption) (*CommandSeq, error)
	TranslateSvcConfig(ctx context.Context, in *ServiceConfig, opts ...grpc.CallOption) (*CommandSeq, error)
	ExecuteConfig(ctx context.Context, in *CommandSeq, opts ...grpc.CallOption) (*BoolReply, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) GetConfig(ctx context.Context, in *DeviceID, opts ...grpc.CallOption) (*ConfigFiles, error) {
	out := new(ConfigFiles)
	err := grpc.Invoke(ctx, "/Driver.Driver/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) TranslatePass(ctx context.Context, in *UserPass, opts ...grpc.CallOption) (*CommandSeq, error) {
	out := new(CommandSeq)
	err := grpc.Invoke(ctx, "/Driver.Driver/TranslatePass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) TranslateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*CommandSeq, error) {
	out := new(CommandSeq)
	err := grpc.Invoke(ctx, "/Driver.Driver/TranslateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) TranslateVar(ctx context.Context, in *Var, opts ...grpc.CallOption) (*CommandSeq, error) {
	out := new(CommandSeq)
	err := grpc.Invoke(ctx, "/Driver.Driver/TranslateVar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) TranslateSvcConfig(ctx context.Context, in *ServiceConfig, opts ...grpc.CallOption) (*CommandSeq, error) {
	out := new(CommandSeq)
	err := grpc.Invoke(ctx, "/Driver.Driver/TranslateSvcConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ExecuteConfig(ctx context.Context, in *CommandSeq, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/Driver.Driver/ExecuteConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driver service

type DriverServer interface {
	GetConfig(context.Context, *DeviceID) (*ConfigFiles, error)
	TranslatePass(context.Context, *UserPass) (*CommandSeq, error)
	TranslateService(context.Context, *Service) (*CommandSeq, error)
	TranslateVar(context.Context, *Var) (*CommandSeq, error)
	TranslateSvcConfig(context.Context, *ServiceConfig) (*CommandSeq, error)
	ExecuteConfig(context.Context, *CommandSeq) (*BoolReply, error)
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeviceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DriverServer).GetConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Driver_TranslatePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UserPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DriverServer).TranslatePass(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Driver_TranslateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DriverServer).TranslateService(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Driver_TranslateVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Var)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DriverServer).TranslateVar(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Driver_TranslateSvcConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ServiceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DriverServer).TranslateSvcConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Driver_ExecuteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CommandSeq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DriverServer).ExecuteConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Driver.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Driver_GetConfig_Handler,
		},
		{
			MethodName: "TranslatePass",
			Handler:    _Driver_TranslatePass_Handler,
		},
		{
			MethodName: "TranslateService",
			Handler:    _Driver_TranslateService_Handler,
		},
		{
			MethodName: "TranslateVar",
			Handler:    _Driver_TranslateVar_Handler,
		},
		{
			MethodName: "TranslateSvcConfig",
			Handler:    _Driver_TranslateSvcConfig_Handler,
		},
		{
			MethodName: "ExecuteConfig",
			Handler:    _Driver_ExecuteConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x5b, 0x6f, 0x12, 0x41,
	0x14, 0xb6, 0x6c, 0x59, 0x96, 0x03, 0x54, 0x1c, 0x2f, 0x21, 0xf8, 0x62, 0xc6, 0xc4, 0x34, 0x31,
	0xc1, 0x48, 0x4d, 0xac, 0xbe, 0xd9, 0x82, 0xc6, 0x34, 0x26, 0xcd, 0x60, 0x89, 0xd1, 0x07, 0x33,
	0xc2, 0x29, 0x59, 0x81, 0x5d, 0xba, 0x33, 0xa0, 0xfd, 0x33, 0xfe, 0x38, 0x7f, 0x89, 0xb3, 0x3b,
	0x97, 0x25, 0x74, 0x49, 0x88, 0xfa, 0x36, 0xe7, 0xf2, 0x9d, 0xef, 0x9c, 0x39, 0x17, 0xa8, 0x8f,
	0x93, 0x70, 0x85, 0x49, 0x67, 0x91, 0xc4, 0x32, 0x26, 0x7e, 0x2f, 0x93, 0xe8, 0x43, 0xa8, 0x9e,
	0xc4, 0xf1, 0x8c, 0xe1, 0x62, 0x76, 0x4d, 0x0e, 0xa0, 0x14, 0x4f, 0x5b, 0x7b, 0x8f, 0xf6, 0x0e,
	0x03, 0xa6, 0x5e, 0xf4, 0x13, 0xf8, 0x67, 0xc3, 0x73, 0x1e, 0x26, 0xe4, 0x09, 0x94, 0xc7, 0xb8,
	0x0a, 0xc7, 0x99, 0xb1, 0xd6, 0x6d, 0x76, 0x34, 0xbc, 0xd3, 0x53, 0xca, 0x11, 0xbe, 0xef, 0x31,
	0x6d, 0x26, 0x4d, 0xf0, 0xa6, 0x78, 0xdd, 0x2a, 0x29, 0xaf, 0x2a, 0x4b, 0x9f, 0xe4, 0x1e, 0x94,
	0x57, 0x7c, 0xb6, 0xc4, 0x96, 0x97, 0xe9, 0xb4, 0x40, 0xfb, 0x50, 0x3d, 0x1b, 0x32, 0xbc, 0x5a,
	0xa2, 0x90, 0x7f, 0x1f, 0x9c, 0x1e, 0x03, 0x30, 0x9c, 0xd8, 0x38, 0x04, 0xf6, 0x23, 0x3e, 0xc7,
	0x2c, 0x4c, 0x95, 0x65, 0x6f, 0xf2, 0x00, 0x7c, 0x11, 0x8f, 0xa6, 0x28, 0x0d, 0xcc, 0x48, 0xb4,
	0x0d, 0x81, 0x0d, 0x9f, 0x96, 0x6d, 0xc8, 0x3d, 0xa6, 0x5e, 0x54, 0x40, 0x63, 0x80, 0x49, 0x6a,
	0x3c, 0x8d, 0xa3, 0xcb, 0x70, 0xb2, 0x73, 0x82, 0x36, 0x81, 0xd2, 0x5a, 0x02, 0x26, 0x69, 0xaf,
	0xe0, 0x47, 0xf6, 0xd7, 0x7f, 0xe4, 0x3b, 0x04, 0x17, 0x02, 0x93, 0x73, 0x2e, 0xc4, 0xce, 0x7c,
	0xaa, 0x88, 0xa5, 0xc2, 0xac, 0x71, 0x3a, 0x39, 0xb5, 0x2d, 0x54, 0xac, 0x1f, 0x71, 0x32, 0x36,
	0xe4, 0x4e, 0xa6, 0x5f, 0xa0, 0x62, 0x0a, 0xfc, 0xa7, 0xd2, 0x54, 0x21, 0x42, 0x72, 0xa9, 0x5b,
	0x1b, 0x30, 0x2d, 0xd0, 0x0b, 0xf0, 0x86, 0xfc, 0xff, 0x4f, 0xcc, 0x63, 0xa8, 0x9c, 0xc6, 0xf3,
	0x39, 0x8f, 0xc6, 0xa4, 0x05, 0x95, 0x91, 0x7e, 0x9a, 0x56, 0x5b, 0x91, 0x72, 0x00, 0xe3, 0x34,
	0xc0, 0xab, 0x9d, 0x53, 0x78, 0x0a, 0x81, 0x09, 0x20, 0x54, 0x1e, 0x9e, 0x72, 0xbd, 0x6d, 0x5d,
	0x4d, 0x34, 0xe6, 0x1c, 0xe8, 0xeb, 0x94, 0x22, 0x9d, 0x8a, 0xb7, 0xe1, 0x0c, 0x0b, 0x47, 0x2e,
	0x4b, 0x2f, 0x92, 0x18, 0xe9, 0x99, 0xab, 0x33, 0x2b, 0xd2, 0xaf, 0x50, 0xcb, 0xb1, 0xbb, 0xb7,
	0xf9, 0x10, 0xca, 0x97, 0x29, 0xc0, 0x24, 0x47, 0xf2, 0xe4, 0x6c, 0x2c, 0xa6, 0x1d, 0xba, 0xbf,
	0xf6, 0xc0, 0xef, 0x47, 0x93, 0x30, 0x42, 0x72, 0x04, 0x81, 0x5a, 0x8d, 0x50, 0x48, 0x4c, 0x88,
	0x43, 0xe4, 0xcb, 0xd2, 0xbe, 0x63, 0x75, 0x6e, 0xfd, 0xe9, 0x2d, 0xd2, 0x81, 0xca, 0x3b, 0x94,
	0x1f, 0x50, 0x72, 0xe2, 0xec, 0x6e, 0x4f, 0xdb, 0x07, 0xb9, 0x2a, 0x3d, 0x0a, 0xca, 0xff, 0x19,
	0x04, 0x03, 0xbe, 0xc2, 0x0c, 0xb0, 0x61, 0x2d, 0x24, 0xe8, 0xfe, 0x2e, 0x81, 0xb9, 0x3c, 0xe4,
	0x05, 0x54, 0x15, 0x97, 0xd9, 0xb0, 0x1b, 0xb5, 0xb7, 0xef, 0xde, 0xac, 0x52, 0x28, 0xc6, 0x97,
	0xd0, 0xf8, 0x98, 0xf0, 0x48, 0xcc, 0xd4, 0xa8, 0x65, 0xbb, 0xe2, 0x90, 0x76, 0x7b, 0xda, 0x64,
	0xa3, 0x79, 0x6a, 0x14, 0x14, 0xf0, 0x15, 0x34, 0x1d, 0xd0, 0x0e, 0xbf, 0x6b, 0xb3, 0x51, 0x6c,
	0x81, 0x3e, 0x87, 0xba, 0x83, 0xa6, 0xa3, 0x5d, 0xb3, 0x5e, 0x4a, 0xd8, 0x02, 0x79, 0x03, 0x24,
	0x67, 0x5b, 0x8d, 0x4c, 0x95, 0xf7, 0x37, 0xf8, 0xb4, 0x7a, 0x4b, 0x88, 0x63, 0x68, 0xf4, 0x7f,
	0xe2, 0x68, 0x29, 0xed, 0x15, 0x2a, 0x70, 0x2b, 0xfc, 0xe4, 0x93, 0xe0, 0xb3, 0xaf, 0x6f, 0xfd,
	0x37, 0x3f, 0x3b, 0xf6, 0x47, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xe2, 0xf5, 0x81, 0xfc,
	0x05, 0x00, 0x00,
}
